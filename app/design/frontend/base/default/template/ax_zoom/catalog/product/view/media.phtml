<?php
/**
*  Module: jQuery AJAX-ZOOM for Magento, /app/design/frontend/base/default/template/ax_zoom/catalog/product/view/media.phtml
*  Copyright: Copyright (c) 2010-2017 Vadim Jacobi
*  License Agreement: http://www.ajax-zoom.com/index.php?cid=download
*  Version: 1.3.0
*  Date: 2017-06-25
*  Review: 2017-06-25
*  URL: http://www.ajax-zoom.com
*  Documentation: http://www.ajax-zoom.com/index.php?cid=modules&module=magento
*
*  @author    AJAX-ZOOM <support@ajax-zoom.com>
*  @copyright 2010-2017 AJAX-ZOOM, Vadim Jacobi
*  @license   http://www.ajax-zoom.com/index.php?cid=download
*/

$_product = $this->getProduct();
$productId = $_product->getId();
$ax = Mage::getModel('axzoom/ax360');
$conf = Mage::getStoreConfig('axzoom_options');
$ajaxzoom_initParam = $ax->prepareInitParamFront($conf);
$axZmPath = Mage::getBaseUrl('js') . 'axzoom/axZm/';
$product = Mage::getModel('catalog/product')->load($productId);
$images360Json = $ax->images360Json($productId);
$imagesJsonAll = array();
?>

<script type="text/javascript">
    // Fallback if catalog_product_view reference name="head" is not loaded
    var mageAzJsUrl = '<?php echo Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_JS).'axzoom/'; ?>';
    document.writeln(unescape("%3Cscript type='text/javascript' src='"+mageAzJsUrl+"check_fallback.js'%3E%3C/script%3E"));
</script>

<?php echo !function_exists('ioncube_loader_iversion') ? '<div style="padding: 5px; margin-bottom: 5px; border: 1px solid red">'.$this->__('PHP "Ioncube loader" is not installed on this server. Please install this extension!').'</div>' : '';?>

<div class="axZm_mouseOverWithGalleryContainer" id="axZm_mouseOverWithGalleryContainer">

    <!-- Parent container for offset to the left or right -->
    <div class="axZm_mouseOverZoomContainerWrap">

        <!-- Alternative container for title of the images -->
        <div class="axZm_mouseOverTitleParentAbove"></div>

        <!-- Container for mouse over image -->
        <div id="<?php echo $conf['general_settings']['divID']; ?>" class="axZm_mouseOverZoomContainer">

            <!-- Optional CSS aspect ratio and message to preserve layout before JS is triggered -->
            <div class="axZm_mouseOverAspectRatio">
                <div>
                    <span><?php echo $this->__('Image loading...'); ?></span>
                </div>
            </div>

        </div>
    </div>

    <!-- gallery with thumbs (will be filled with thumbs by javascript) -->
    <div id="<?php echo $conf['general_settings']['galleryDivID']; ?>" class="axZm_mouseOverGallery"></div>

</div>

<?php
// 360 assigned from configurable products to Simple products
$map = array();
if ($groups = $ax->getCollection()->addFieldToFilter('id_product', $productId)->getData()) {
    foreach ($groups as $group) {
        $comp = Mage::helper('core')->jsonDecode($group['combinations']);
        if ($comp) {
            foreach ($comp as $pid) {
                if (!isset($map[$pid])) {
                    $map[$pid] = array();
                }
                array_push($map[$pid], $group['id_360']);
            }
        }
    }
}

// all attributes map
$mapAttributesCodeId = array();
$attributes = Mage::getResourceModel('catalog/product_attribute_collection')->getItems();
foreach ($attributes as $attribute) {
    $mapAttributesCodeId[$attribute->getAttributecode()] = $attribute->getId();
}
$mapAttributesIdCode = array_flip($mapAttributesCodeId);

// get configurable options
if ($product->type_id == 'configurable') {
    $attributesCodes = array();
    $productAttributesOptions = $product->getTypeInstance(true)->getConfigurableOptions($product);
    foreach ($productAttributesOptions as $productAttributeId => $productAttributeOption) {
        $attributesCodes[] = $mapAttributesIdCode[$productAttributeId];
    }
}

// get associated products
$res = array();
if ($product->isConfigurable()) {
    $childProducts = Mage::getModel('catalog/product_type_configurable')->getUsedProducts(null, $product);

    foreach ($childProducts as $child) {

        $data = $child->getData();
        $p = Mage::getModel('catalog/product')->load($data['entity_id']);

        $pairs = array();
        $labels = array();

        foreach ($attributesCodes as $code) { // $code is e.g. color or size
            $pairs[] = $mapAttributesCodeId[$code] . ':' . $data[$code]; // generate pairs of attribures
            $attr = $product->getResource()->getAttribute($code);

            // We need to get default label value and not language value - getAllOptions(false, true) will return default values
            // http://docs.magentocommerce.com/Mage_Eav/Mage_Eav_Model_Entity_Attribute_Source_Table.html
            $option_label = $ax->findDefaultLabelValue($attr->getSource()->getAllOptions(false, true), $data[$code]);

            if ($option_label == false) {
                // This would return language specific values
                $option_label = $attr->getSource()->getOptionText($data[$code]);
            }

            array_push($labels, trim($option_label));
        }

        $idx = implode(',', $pairs);
        $res[$idx] = array();

        $obj = null;
        $cnt = 0;

        // add native images
        foreach ($p->getMediaGalleryImages() as $image) {
            $tmp = parse_url($image->getUrl());
            if (!$obj) {
                $obj = new stdClass;
            }
            $params = new stdClass;
            $params->img = $tmp['path'];
            array_push($imagesJsonAll, $tmp['path']);
            $params->title = '';
            $obj->$cnt = $params; 
            $cnt++;
        }

        // add related images via labels (images from configurable product)
        foreach ($product->getMediaGalleryImages() as $image) {
            if ($image->label_default != '' && in_array(trim($image->label_default), $labels)) {	
                $tmp = parse_url($image->getUrl());
                if (!$obj) {
                    $obj = new stdClass;
                }
                $params = new stdClass;
                $params->img = $tmp['path'];
                array_push($imagesJsonAll, $tmp['path']);
                $params->title = '';
                $obj->$cnt = $params; 
                $cnt++;
            } else {
                $tmp = parse_url($image->getUrl());
                array_push($imagesJsonAll, $tmp['path']);
            }
        }

        if ($obj != null) {
            $res[$idx]['images'] = $obj;
        } else {
            $res[$idx]['images'] = new stdClass();
        }

        $extraGroups = empty($map[$data['entity_id']]) ? array() : $map[$data['entity_id']];
        $res[$idx]['images360'] = Mage::helper('core')->jsonDecode(str_replace("'", '"', $ax->images360Json($data['entity_id'], $extraGroups)));
    }
}

// Prepare json for AJAX-ZOOM
$cnt = 0;
$imagesJson = array();
$imagesJsonAll = array_unique($imagesJsonAll);

// Some images present
if (count($this->getGalleryImages()) > 0) {
    // If no base image is defined and there is only one image in the gallery and there is a 360 view for this product, then we do not show this image at all. 
    // You can change it by setting the radio button "Base Image" under product configuration -> Images 
    if (!($images360Json != '{}' && count($this->getGalleryImages()) == 1 && $product->getImage() == 'no_selection')) {

        // Loop over gallery images
        foreach ($this->getGalleryImages() as $image) {

            $check_image = false;

            if (method_exists($this, 'isGalleryImageVisible')) {
                $check_image = $this->isGalleryImageVisible($image);
            } else {
                $check_image = true;
            }

            if ($check_image) {
                $cnt++;
                $tmp = parse_url($image->getUrl());
                array_push($imagesJson, $cnt . ': {img: "' . $tmp['path'] . '", title: ""}');
            }
        }
    }
} elseif ($conf['plugin_settings']['magentoNoImage']) { // No images present
    if ($image_url = $this->helper('catalog/image')->init($product, 'image')) {
        $tmp = parse_url($image_url);
        array_push($imagesJson, '1: {img: "' . $tmp['path'] . '", title: ""}');
    }
}

echo $this->getChildHtml('after');
?>

<!-- AJAX-ZOOM js block -->
<script type="text/javascript">
/*!
*  Module: jQuery AJAX-ZOOM for Magento
*  Info: http://www.ajax-zoom.com/index.php?cid=modules&module=magento
*  @copyright 2010-2017 AJAX-ZOOM, Vadim Jacobi
*  @license http://www.ajax-zoom.com/index.php?cid=download
*/

;(function($) {

    if (!jQuery.axZm_psh) {
        jQuery.axZm_psh = { };
    }

    // Default plain images
    <?php if ($conf['plugin_settings']['magentoAllImages'] == 'true'){ ?>
    jQuery.axZm_psh.IMAGES_JSON = <?php echo $ax->imagesJsonAll($imagesJsonAll);?>;
    <?php } else { ?>
    jQuery.axZm_psh.IMAGES_JSON = {<?php echo implode(',', $imagesJson); ?>};
    <?php } ?>

    // Default 360
    jQuery.axZm_psh.IMAGES_360_JSON = <?php echo $images360Json; ?>;
    jQuery.axZm_psh.axZmPath = '<?php echo $axZmPath; ?>';
    jQuery.axZm_psh.shopLang = '<?php echo substr(Mage::app()->getLocale()->getLocaleCode(), 0, 2); ?>';
    jQuery.axZm_psh.initParam = <?php echo  $ajaxzoom_initParam; ?>;
    jQuery.axZm_psh.divID = jQuery.axZm_psh.initParam.divID;
    jQuery.axZm_psh.galleryDivID = jQuery.axZm_psh.initParam.galleryDivID;

    // Colors / attributes
    jQuery.axZm_psh.axAssociated = jQuery.parseJSON('<?php echo Mage::helper('core')->jsonEncode($res); ?>');

    // Need that later for not reloading if images are the same
    jQuery.axZm_psh.IMAGES_AND_360_LOADED = JSON.stringify({
        images: jQuery.extend(true, {}, jQuery.axZm_psh.IMAGES_JSON),
        images360: jQuery.extend(true, {}, jQuery.axZm_psh.IMAGES_360_JSON)
    });

    // Swatches
    jQuery.axZm_psh.resetAxZoom = function() {
        if (JSON.stringify({images: jQuery.axZm_psh.IMAGES_JSON, images360: jQuery.axZm_psh.IMAGES_360_JSON}) == jQuery.axZm_psh.IMAGES_AND_360_LOADED) {
            return;
        }

        jQuery.axZm_psh.IMAGES_AND_360_LOADED = JSON.stringify({
            images: jQuery.axZm_psh.IMAGES_JSON, 
            images360: jQuery.axZm_psh.IMAGES_360_JSON
        });

        jQuery.mouseOverZoomInit.replaceImages({
            divID: jQuery.axZm_psh.divID,
            galleryDivID: jQuery.axZm_psh.galleryDivID,
            images: jQuery.axZm_psh.IMAGES_JSON,
            images360: jQuery.axZm_psh.IMAGES_360_JSON
        });
    };

    // Change values
    jQuery.axZm_psh.updateAxZoomAction = function(idxSel, checkout) {
        if ( 
            (jQuery.isPlainObject(idxSel.images) && !jQuery.isEmptyObject(idxSel.images))
            || (jQuery.isPlainObject(idxSel.images360) && !jQuery.isEmptyObject(idxSel.images360))
        ) {

            if (JSON.stringify({images: idxSel.images, images360: idxSel.images360}) == jQuery.axZm_psh.IMAGES_AND_360_LOADED) {
                return;
            } 

            jQuery.axZm_psh.IMAGES_AND_360_LOADED = JSON.stringify({images: idxSel.images, images360: idxSel.images360});

            if (checkout) {
                jQuery.axZm_psh.initParam.images = idxSel.images;
                jQuery.axZm_psh.initParam.images360 = idxSel.images360;
                jQuery.mouseOverZoomInit(jQuery.axZm_psh.initParam);
            } else {
                jQuery.mouseOverZoomInit.replaceImages( {
                    divID: jQuery.axZm_psh.divID,
                    galleryDivID: jQuery.axZm_psh.galleryDivID,
                    images: idxSel.images,
                    images360: idxSel.images360
                });
            }
        } else { // show initial images
            jQuery.axZm_psh.resetAxZoom();
        }
    };

    jQuery.axZm_psh.updateAxZoom = function(e, check) {
        var obj = jQuery(this);
        var requestSet = function() {
            if (!spConfig) {
                return;
            }

            if (!check && e && e.type == 'change' && obj.val() == '') {
                jQuery.axZm_psh.resetAxZoom();
                return;
            }

            var pairs = [];
            var inWhichObj = (check ? (spConfig.values ? spConfig.values : spConfig.state) : spConfig.state);
            for (var k in inWhichObj) {
                if (
                    typeof spConfig.state[k] !== 'function'
                    && typeof spConfig.state[k] !== 'object'
                    && (spConfig.state[k] != false
                    || (spConfig.values && check))
                ) {
                    pairs.push(k + ':' + inWhichObj[k]);
                }
            }

            var idx = pairs.join(',');
            var idxSel = jQuery.axZm_psh.axAssociated[idx];

            if (check) {
                return idxSel;
            }

            if (idxSel) {
                jQuery.axZm_psh.updateAxZoomAction(idxSel);
            } else {
                // try to find whatever
                jQuery.each(jQuery.axZm_psh.axAssociated, function(k, v) {
                    if (k.indexOf(idx) != -1) {
                        jQuery.axZm_psh.updateAxZoomAction(v);
                        return false;
                    }
                })
            }
        };

        if (check) {
            return requestSet();
        } else {
            setTimeout(function() {
                requestSet();
            }, 50);
        }

    };

    // Shortcut for maybe other applications or additional functionality
    // window.resetAxZoom() will reset AJAX-ZOOM to the state when article is loaded without attribute selection
    window.resetAxZoom = jQuery.axZm_psh.resetAxZoom;
    window.updateAxZoom = jQuery.axZm_psh.updateAxZoom;

    // Init AJAX-ZOOM
    jQuery.mouseOverZoomInit(jQuery.axZm_psh.initParam);

    jQuery(document).ready(function() {
        jQuery('.swatch-label').click(jQuery.axZm_psh.updateAxZoom); // version 1.9.1 or more
        jQuery('.super-attribute-select').change(jQuery.axZm_psh.updateAxZoom);

        if (window.spConfig && spConfig.values) {
            var aaa = window.updateAxZoom(null, true);
            if (aaa) {
                jQuery.axZm_psh.updateAxZoomAction(aaa);
            }
        }
    });

})(jQuery);
</script>